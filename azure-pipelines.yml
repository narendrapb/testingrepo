# Python Function App to Linux on Azure
# Build a Python function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- none
pool:
  name: my-personal-computer
  demands:
  - agent.name -equals MyvmAgent
variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '80b3cb1c-5093-4161-8e01-149c063ddfca'

  # Function app name
  functionAppName: 'functionfromazuredevops'

  # Agent VM image name


  # Working Directory
  workingDirectory: '/'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build


    steps:
    # - script: |
    #     sudo apt-get update
    #     sudo apt-get install -y software-properties-common
    #     sudo add-apt-repository ppa:deadsnakes/ppa
    #     sudo apt-get update
    #     sudo apt-get install -y python3.10
    #   displayName: 'Install Python 3.10'

    - bash: |
        if [ -f extensions.csproj ]
        then
            dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
        fi
      workingDirectory: $(workingDirectory)
      displayName: 'Build extensions'
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.10'
        githubToken: $(github_token)
        addToPath: true
        architecture: 'x64'
      displayName: 'Use Python 3.10'

    - bash: |
        pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
      workingDirectory: $(workingDirectory)
      displayName: 'Install application dependencies'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(workingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionAppLinux
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'